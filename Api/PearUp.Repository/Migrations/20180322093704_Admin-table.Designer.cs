// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PearUp.BusinessEntity;
using PearUp.Repository;
using System;

namespace PearUp.Repository.Migrations
{
    [DbContext(typeof(PearUpContext))]
    [Migration("20180322093704_Admin-table")]
    partial class Admintable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("Relational:Sequence:.AdminHiLo", "'AdminHiLo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.InterestsHiLo", "'InterestsHiLo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.UserHiLo", "'UserHiLo', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PearUp.BusinessEntity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "AdminHiLo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("PearUp.BusinessEntity.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "InterestsHiLo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("InterestDescription")
                        .HasMaxLength(512);

                    b.Property<string>("InterestName")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("PearUp.BusinessEntity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "UserHiLo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("BucketList")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                    b.Property<string>("FunAndInterestingThings")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PearUp.BusinessEntity.UserInterest", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("InterestId");

                    b.HasKey("UserId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterest");
                });

            modelBuilder.Entity("PearUp.LoggingFramework.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("PearUp.BusinessEntity.Admin", b =>
                {
                    b.OwnsOne("PearUp.BusinessEntity.Email", "Email", b1 =>
                        {
                            b1.Property<int>("AdminId");

                            b1.Property<string>("EmailId")
                                .IsRequired()
                                .HasColumnName("Email")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.ToTable("Admin");

                            b1.HasOne("PearUp.BusinessEntity.Admin")
                                .WithOne("Email")
                                .HasForeignKey("PearUp.BusinessEntity.Email", "AdminId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("PearUp.BusinessEntity.Password", "Password", b1 =>
                        {
                            b1.Property<int?>("AdminId");

                            b1.Property<byte[]>("PasswordHash")
                                .IsRequired()
                                .HasColumnName("PasswordHash")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.Property<byte[]>("PasswordSalt")
                                .IsRequired()
                                .HasColumnName("PasswordSalt")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.ToTable("Admin");

                            b1.HasOne("PearUp.BusinessEntity.Admin")
                                .WithOne("Password")
                                .HasForeignKey("PearUp.BusinessEntity.Password", "AdminId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("PearUp.BusinessEntity.User", b =>
                {
                    b.OwnsOne("PearUp.BusinessEntity.Age", "Age", b1 =>
                        {
                            b1.Property<int>("UserId");

                            b1.Property<DateTime>("DateOfBirth")
                                .HasColumnName("DateOfBirth")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.ToTable("User");

                            b1.HasOne("PearUp.BusinessEntity.User")
                                .WithOne("Age")
                                .HasForeignKey("PearUp.BusinessEntity.Age", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("PearUp.BusinessEntity.Gender", "Gender", b1 =>
                        {
                            b1.Property<int>("UserId");

                            b1.Property<int>("GenderType")
                                .HasColumnName("Gender")
                                .HasColumnType("int");

                            b1.ToTable("User");

                            b1.HasOne("PearUp.BusinessEntity.User")
                                .WithOne("Gender")
                                .HasForeignKey("PearUp.BusinessEntity.Gender", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("PearUp.BusinessEntity.Password", "Password", b1 =>
                        {
                            b1.Property<int>("UserId");

                            b1.Property<byte[]>("PasswordHash")
                                .IsRequired()
                                .HasColumnName("PasswordHash")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.Property<byte[]>("PasswordSalt")
                                .IsRequired()
                                .HasColumnName("PasswordSalt")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.ToTable("User");

                            b1.HasOne("PearUp.BusinessEntity.User")
                                .WithOne("Password")
                                .HasForeignKey("PearUp.BusinessEntity.Password", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("PearUp.BusinessEntity.UserMatchPreference", "MatchPreference", b1 =>
                        {
                            b1.Property<int>("UserId");

                            b1.Property<int>("Distance")
                                .HasColumnName("Distance")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.Property<int>("MaxAge")
                                .HasColumnName("MaxAge")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.Property<int>("MinAge")
                                .HasColumnName("MinAge")
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.ToTable("User");

                            b1.HasOne("PearUp.BusinessEntity.User")
                                .WithOne("MatchPreference")
                                .HasForeignKey("PearUp.BusinessEntity.UserMatchPreference", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("PearUp.BusinessEntity.Gender", "LookingFor", b2 =>
                                {
                                    b2.Property<int>("UserMatchPreferenceUserId");

                                    b2.Property<int>("GenderType")
                                        .HasColumnName("LookingFor")
                                        .HasColumnType("int")
                                        .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                                    b2.ToTable("User");

                                    b2.HasOne("PearUp.BusinessEntity.UserMatchPreference")
                                        .WithOne("LookingFor")
                                        .HasForeignKey("PearUp.BusinessEntity.Gender", "UserMatchPreferenceUserId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("PearUp.BusinessEntity.UserPhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("UserId");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnName("CountryCode")
                                .HasMaxLength(3)
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnName("PhoneNumber")
                                .HasMaxLength(12)
                                .HasAnnotation("PropertyAccessMode", PropertyAccessMode.Field);

                            b1.ToTable("User");

                            b1.HasOne("PearUp.BusinessEntity.User")
                                .WithOne("PhoneNumber")
                                .HasForeignKey("PearUp.BusinessEntity.UserPhoneNumber", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("PearUp.BusinessEntity.UserInterest", b =>
                {
                    b.HasOne("PearUp.BusinessEntity.Interest", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PearUp.BusinessEntity.User", "User")
                        .WithMany("Interests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
